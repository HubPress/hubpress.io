<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Simon's blog]]></title><description><![CDATA[Do one thing at a time, and do well.]]></description><link>https://SakuragiZHX.github.io</link><image><url>/images/cover-star.jpg</url><title>Simon&apos;s blog</title><link>https://SakuragiZHX.github.io</link></image><generator>RSS for Node</generator><lastBuildDate>Sun, 04 Dec 2016 08:45:08 GMT</lastBuildDate><atom:link href="https://SakuragiZHX.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[浅谈JavaScript中的闭包]]></title><description><![CDATA[<div class="sect2">
<h3 id="__">一、闭包是什么？</h3>
<div class="paragraph">
<p>《JavaScript高级程序设计》上写道：“闭包是指有权访问另一个函数作用域中的变量的函数”，如果用下定义的观点看，这句话就是说“闭包是函数”，带着怀疑的心态又去网上找了找，发现什么说法都有，还是不能明白，暂且不管，还是看代码来得直接。</p>
</div>
<div class="listingblock">
<div class="content">
<pre>function outter(){
	var sky="blue";
    function inner(){
    	console.log(sky);
    }

    return inner;
}
var result=outter();
result();	//"blue"</pre>
</div>
</div>
<div class="paragraph">
<p>这段代码就包含一个简单的闭包：outter函数的返回值是一个函数，即inner。inner在outter内部，理所当然能访问到局部变量sky，但当inner作为outter的返回值赋给outter外的全局变量时，神奇的事情发生了：在全局作用域中访问到了sky，这就是闭包。</p>
</div>
</div>
<div class="sect2">
<h3 id="___2">二、闭包的原理</h3>
<div class="paragraph">
<p>每个函数都有自己的执行环境，当一个函数被执行时，它的执行环境就会被推入环境栈，一旦执行完，栈将其环境弹出，活动对象(存储环境中定义的变量及函数)被销毁。</p>
</div>
<div class="paragraph">
<p>对于上面的例子来说，outter执行完之后将值赋给了result，outter的执行环境从环境栈弹出，控制权交给全局环境，outter的活动对象理应被销毁。但此时inner已经存储在全局活动对象中了，同时inner需要访问sky，即outter的活动对象没有被销毁，直到result执行完毕，inner的活动对象被销毁后，outter的活动对象才会被销毁。</p>
</div>
</div>
<div class="sect2">
<h3 id="___3">三、闭包的作用</h3>
<div class="paragraph">
<p>说了这么多，闭包到底有什么用呢？我个人认为闭包最大的用处即防止对全局作用域的污染。
试想如果我们把一些仅仅只用到一两次的变量都声明在全局作用域中，最后肯定是容易出错且不可维护的。而闭包最神奇的地方就是能在一个函数外访问函数中的局部变量，把这些变量用闭包的形式放在函数中便能避免污染。</p>
</div>
</div>
<div class="sect2">
<h3 id="___4">四、需要注意的</h3>
<div class="ulist">
<ul>
<li>
<p>闭包将函数的活动对象维持在内存中，过度使用闭包会导致内存占用过多；</p>
</li>
<li>
<p>闭包只能取得外部函数中任何变量的最后一个值，在使用循环且返回的函数中带有循环变量时会得到错误结果；</p>
</li>
<li>
<p>当返回的函数为匿名函数时，注意匿名函数中的this指的是window对象。</p>
</li>
</ul>
</div>
</div>]]></description><link>https://SakuragiZHX.github.io/2016/12/04/Java-Script.html</link><guid isPermaLink="true">https://SakuragiZHX.github.io/2016/12/04/Java-Script.html</guid><category><![CDATA[JavaScript]]></category><category><![CDATA[ 闭包]]></category><dc:creator><![CDATA[Simon]]></dc:creator><pubDate>Sun, 04 Dec 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[简单易用的github博客搭建工具---HubPress]]></title><description><![CDATA[<div class="sect1">
<h2 id="__hubpress">一、HubPress是什么?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>HubPress是一款免费、开源的基于GitHub Page用来搭建博客的web app。</p>
</div>
<div class="paragraph">
<p>HubPress支持 <a href="http://asciidoctor.org/" target="_blank">AsciiDoc</a>语言(类似MarkDown)，集成了Disqus(第三方网站评论工具，已经被墙o(╯□╰)o )以及Google Analytics(Google 提供的站点数据分析服务，国内也用不了&#8230;&#8203;&#8230;&#8203;)，并提供了多种主题供用户选择。</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="__hubpress_vs_jekyll">二、HubPress VS Jekyll</h2>
<div class="sectionbody">
<div class="paragraph">
<p>一提到基于GitHub Page搭建博客，大多数人首先想到的是Jekyll，那么相对Jekyll，HubPress有哪些特点呢？</p>
</div>
<div class="ulist">
<ul>
<li>
<p>HubPress操作简单，你只需要一个github账号就能搞定一切。</p>
</li>
<li>
<p>HubPress功能相对Jekyll较弱。</p>
</li>
<li>
<p>HubPress支持AsciiDoc语法，而Jekyll支持MarkDown。这一点显然是Jekyll占优，毕竟MarkDown的流行度不是前者能比的。</p>
</li>
<li>
<p>HubPress只能运行在GitHub Page上，而Jekyll不受此限制。</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>既然Jekyll各个方面都比HubPress好，我们为什么还要用HubPress呢？其实就是HubPress实在是太简单易用了，即使是一个从来没写过程序的人也能不花太多功夫搭好自己的博客，虽然这也是它的缺点，但不可否认也是HubPress最吸引人的地方。</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="__hubpress_2">三、HubPress建站流程</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>首先你需要有个github账号，登录到github首页搜索HubPress.io，然后fork;</p>
</li>
<li>
<p>进入fork到自己github上的HubPress.io这个repository，选择settings，将repository name改为&lt;username&gt;.github.io；</p>
</li>
<li>
<p>找到hubress/config.json文件，按文件中提示内容修改文件。</p>
</li>
<li>
<p>登录到https://username.github.io/hubpress/ ,在setting中可以修改站点相关信息，使用集成的编辑器编写asciidoc文档，然后posts即可。</p>
</li>
</ol>
</div>
<div class="paragraph">
<p><strong>详细信息还是参见HubPress项目主页的ReadMe，英文不好的同学可能要吃力一些，但总体上较为简单。本人菜鸟一枚，如有错误及遗漏之处，欢迎指出。</strong></p>
</div>
</div>
</div>]]></description><link>https://SakuragiZHX.github.io/2016/12/03/github-Hub-Press.html</link><guid isPermaLink="true">https://SakuragiZHX.github.io/2016/12/03/github-Hub-Press.html</guid><category><![CDATA[Tool]]></category><category><![CDATA[ Blog]]></category><dc:creator><![CDATA[Simon]]></dc:creator><pubDate>Sat, 03 Dec 2016 00:00:00 GMT</pubDate></item></channel></rss>