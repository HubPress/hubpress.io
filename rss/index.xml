<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Codehaks]]></title><description><![CDATA[Daily adventures of a web developer]]></description><link>https://codehaks.github.io</link><generator>RSS for Node</generator><lastBuildDate>Fri, 01 Sep 2017 04:42:20 GMT</lastBuildDate><atom:link href="https://codehaks.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Bare-Minimum Hello world!]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In this post I&#8217;m exploring what is the bare minimum neccesary code to show "Hello Wolrd!" in an ASP.NET Core 2.0 Application. bear with me!</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_the_template">The template</h3>
<div class="paragraph">
<p>Of course to get the bare minimum in the first place you need to create a  project using "ASP.NET Core Empty" template.</p>
</div>
</div>
<div class="sect2">
<h3 id="_program_cs">Program.cs</h3>
<div class="paragraph">
<p>The most important part that you have to change here is the <strong>CreateDefaultBuilder</strong> Method. To do that I took a look at the source code (Thanks to open-source) and create the host myself.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c#" data-lang="c#">using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Hosting;
namespace BareMinCore
{
    public class Program
    {
        public static void Main(string[] args)
        {
             var builder = new WebHostBuilder()
                .UseKestrel()
                .UseStartup&lt;Startup&gt;()
                .Build();
            builder.Run();
        }
    }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_startup_cs">Startup.cs</h3>
<div class="paragraph">
<p>This part is a little tricky. I found out that there is no need for <strong>ConfigureServices</strong> or consructor. But we need the <strong>Configure</strong> method always. Thats how ASP.NET Core 2.0 works anyway. so this is what I end up with :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-c#" data-lang="c#">using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
namespace BareMinCore
{
    public class Startup
    {
        public void Configure(IApplicationBuilder app)
        {
            app.Run(async (context) =&gt;
            {
                await context.Response.WriteAsync("Hello World!");
            });
        }
    }
}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_conclusion">Conclusion</h3>
<div class="paragraph">
<p>It&#8217;s always good to find out what is there and what we actually need to run the system. It helps us to understand how the system is working and how we can improve it using less resources. You can download the result project at my github page.</p>
</div>
</div>]]></description><link>https://codehaks.github.io/2017/08/31/Bare-Minimum-Hello-world.html</link><guid isPermaLink="true">https://codehaks.github.io/2017/08/31/Bare-Minimum-Hello-world.html</guid><category><![CDATA[ASP.NET]]></category><category><![CDATA[Core]]></category><category><![CDATA[Startup]]></category><category><![CDATA[Hosting]]></category><dc:creator><![CDATA[Hakim]]></dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[First 3 days with ASP Core 2.0]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>About 3 days ago the final version of ASP Core 2.0 released. I installed the new bits and have been playing with it since. here is my experience so far. Fantastic.</p>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_no_bugs">No bugs</h4>
<div class="paragraph">
<p>So far I expericed no bugs. Everything works perfectly. No compatiblity issues like the preview version and no errors. Its fast and reliable.</p>
</div>
</div>
<div class="sect3">
<h4 id="__net_stanard_2_0">.Net Stanard 2.0</h4>
<div class="paragraph">
<p>Its realy the best part of the new version. it feels more matured than the last version. supporting a larg number of older libararies is really what many developers were looking for.</p>
</div>
</div>
<div class="sect3">
<h4 id="_configuarion_and_logging_as_a_service">Configuarion and Logging as a service</h4>
<div class="paragraph">
<p>With IConfiguration And ILoggerFactory injected directly into Services
its now accessible from every where in project without any additional code.</p>
</div>
</div>
<div class="sect3">
<h4 id="_razor_pages">Razor pages</h4>
<div class="paragraph">
<p>I always needed this feature. In very projects there is some simple pages that dont have any code behind. And even they do, its almost nothing. now I dont have to create a Model, Controller and View just to show about page. and thats my favorite thing in ASP Core 2.0</p>
</div>
</div>
<div class="sect3">
<h4 id="_conclusion">Conclusion</h4>
<div class="paragraph">
<p>Until last week I was not even considering migrating to ASP Core. Because there were so many uncertainities around the project and there were not much to gain after all.
But now I feel like I can not go back and use the old ASP MVC 5 any more ! yes, It&#8217;s that good.</p>
</div>
</div>]]></description><link>https://codehaks.github.io/2017/08/19/First-3-days-with-ASP-Core-20.html</link><guid isPermaLink="true">https://codehaks.github.io/2017/08/19/First-3-days-with-ASP-Core-20.html</guid><category><![CDATA[ASP.NET]]></category><category><![CDATA[Core]]></category><category><![CDATA[MVC]]></category><dc:creator><![CDATA[Hakim]]></dc:creator><pubDate>Sat, 19 Aug 2017 00:00:00 GMT</pubDate></item></channel></rss>