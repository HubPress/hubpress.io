<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Jonathan Brizio]]></title><description><![CDATA[Front-End Software Developer]]></description><link>https://jbrizio.github.io</link><generator>RSS for Node</generator><lastBuildDate>Thu, 04 Aug 2016 20:39:09 GMT</lastBuildDate><atom:link href="https://jbrizio.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Using BEM Methodology]]></title><description><![CDATA[<div class="paragraph">
<p>On my first post, I will share quickly with you a methodology totally recommend to implement in your projects.
Maybe you hear before about that. It&#8217;s was suggest to use for one of our members on my team. After of implement, I&#8217;m totally on agreeing that this methodology is very useful because allow to have a maintainable code and understand better the structure of our project.</p>
</div>
<div class="paragraph">
<p>This methodology consists on to follow a few rules to maintain the consistency throughout the entire project.
These approaches are the same for all technologies: HTML, CSS, JavaScript, docs, tests, etc.</p>
</div>
<div class="paragraph">
<p>For a quick started, I suggest to take at look at the initial documentation to understand the key feature of this methodology:
<a href="https://en.bem.info/methodology/key-concepts/" class="bare">https://en.bem.info/methodology/key-concepts/</a></p>
</div>]]></description><link>https://jbrizio.github.io/2016/07/25/Using-BEM-Methodology.html</link><guid isPermaLink="true">https://jbrizio.github.io/2016/07/25/Using-BEM-Methodology.html</guid><dc:creator><![CDATA[Jonathan Brizio]]></dc:creator><pubDate>Mon, 25 Jul 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Get a fake REST API with zero coding]]></title><description><![CDATA[<div class="paragraph">
<p>When you are working on the frontend, sometimes you need to manipulate dynamic data.
A few months ago, I discover this great tool on Github <a href="https://github.com/typicode/json-server" class="bare">https://github.com/typicode/json-server</a> that allows simulating a fake REST API in your App in a few seconds.</p>
</div>
<div class="paragraph">
<p>After of download the dependencies through npm in your project folder, you need to create a <code>db.json</code> file with the content to use.</p>
</div>
<div class="paragraph">
<p>Example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">{
  "posts": [
    { "id": 1, "title": "json-server", "author": "typicode" }
  ],
  "comments": [
    { "id": 1, "body": "some comment", "postId": 1 }
  ],
  "profile": { "name": "typicode" }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The last step is run this command in your console:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">$ json-server --watch db.json</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now if you go to <a href="http://localhost:3000/posts/1" class="bare">http://localhost:3000/posts/1</a>, you&#8217;ll get:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash" data-lang="bash">{ "id": 1, "title": "json-server", "author": "typicode" }</code></pre>
</div>
</div>
<div class="paragraph">
<p>I hope that this should be a help for you in future projects!</p>
</div>
<div class="paragraph">
<p>Happy coding!</p>
</div>]]></description><link>https://jbrizio.github.io/2016/07/25/Get-a-fake-REST-API-with-zero-coding.html</link><guid isPermaLink="true">https://jbrizio.github.io/2016/07/25/Get-a-fake-REST-API-with-zero-coding.html</guid><dc:creator><![CDATA[Jonathan Brizio]]></dc:creator><pubDate>Mon, 25 Jul 2016 00:00:00 GMT</pubDate></item></channel></rss>